* Commit Message
** Good conventions to follow
https://chris.beams.io/posts/git-commit/#seven-rules
** Excerpt
- https://chris.beams.io/posts/git-commit
#+begin_quote
A team’s approach to its commit log should be no different. In order to create a useful revision history, teams should first agree on a commit message convention that defines at least the following three things:

Style. Markup syntax, wrap margins, grammar, capitalization, punctuation. Spell these things out, remove the guesswork, and make it all as simple as possible. The end result will be a remarkably consistent log that’s not only a pleasure to read but that actually does get read on a regular basis.

Content. What kind of information should the body of the commit message (if any) contain? What should it not contain?

Metadata. How should issue tracking IDs, pull request numbers, etc. be referenced?
#+end_quote
- https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines
#+begin_quote
Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase will confuse you if you run the
two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
or "Fixes bug."  This convention matches up with commit messages generated
by commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent
#+end_quote
- https://github.com/torvalds/subsurface-for-dirk/blob/master/README.md#contributing
#+begin_quote
Header line: explain the commit in one line (use the imperative)

Body of commit message is a few lines of text, explaining things
in more detail, possibly giving some background about the issue
being fixed, etc etc.

The body of the commit message can be several paragraphs, and
please do proper word-wrap and keep columns shorter than about
74 characters or so. That way "git log" will show things
nicely even when it's indented.

Make sure you explain your solution and why you're doing what you're
doing, as opposed to describing what you're doing. Reviewers and your
future self can read the patch, but might not understand why a
particular solution was implemented.

Reported-by: whoever-reported-it
Signed-off-by: Your Name <you@example.com>
#+end_quote
** Takeaways
- Leave a blank line b/t message title and body.
- Explain what and why, but not how it's changed. How should be made self-explantory in code and comments. (This point is argurable. Sometimes it's useful to summarize how?)
- Make atomic commits. Don't put too many changes in one commit or separate one change to multiple commits.
** Conventional commits specification may be worth using
https://www.conventionalcommits.org/en/v1.0.0/
** Other references
*** https://wiki.openstack.org/wiki/GitCommitMessages#Information_in_commit_messages
- Good reference, but some example commit messages may be too detailed here?
