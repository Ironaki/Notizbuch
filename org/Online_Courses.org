* EPFL Scala
** Functional Programming Principle in Scala
*** Week 1
**** Lecture 1.1 Programming Paradigms
***** Imperative Programming 
+ modify mutable variables
+ using assignment
+ control flow: e.g. if-else, loop
***** Function Programming
+ restricted sense: no mutable variable/assignment/control structure
+ wider sense: focus on functions
**** Lecture 1.2 Elements of Programming
***** Substitution model
+ reduce an expression to a value
+ works on expression that does not have side effect
+ does not always terminate
****** Evaluation Strategy
+ call-by-name
+ call-by-value
**** Lecture 1.3 Evaluation Strategies and Termination
+ call-by-value terminates -> call-by-name terminates (BUT the other direction is not true)
+ Scala normally use call-by-value, but can force to use call-by-name
#+BEGIN_SRC scala
def constOne(x: Int, y: => Int) = 1 // 2nd arg is call-by-name
constOne(1+2, loop) // This is OK
constOne(loop, 1+2) // infinite loop
#+END_SRC
**** Lecture 1.4 Conditionals and Value Definitions
+ if-else as an expression
+ boolean as predicate
***** Value Definitions
+ /def/: by-name
+ /val/: by-value
#+BEGIN_SRC scala
def loop: Boolean = loop
val x = loop // infinite loop
def x = loop // This is ok
#+END_SRC
**** Lecture 1.5 Example: square roots with Newton's method
+ Example: Problems for floating point numbers
**** Lecture 1.6 Blocks and Lexical Scope
***** block and visibility
+ def inside block only visible inside
+ def outside block visible inside as long as it's not shadowed
***** Continued Expression
#+BEGIN_SRC scala
// semicoloms usually omitted
// two expressions
a
+b
// one expression
(a
+b)
// one expression
a+
b
#+END_SRC
**** Lecture 1.7 Tail Recursion
+ Tail recursion is the functional form of a loop
**** Assignment
Challenging Part
- countChange
*** Week 2
**** Lecture 2.1 Higher-Order Functions
+ Function Type
  e.g. f: Int => Interface
+ Anonymous Functions
  They are just syntactic sugar
#+BEGIN_SRC scala
(x: Int) = x * x 
//anoymous function above is syntactic sugar of the two lines below
def square(x: Int) = x * x
square 
#+END_SRC
**** Lecture 2.2 Currying
+ Scala syntax for currying
#+BEGIN_SRC scala
def cube(x) = x * x * x
def sum(f: Int => Int)(a: Int, b: Int): Int
// So you can use the following
sum(cube)
// Type of sum:
// (Int => Int) => (Int, Int) => Int
// or
// (Int => Int) => ((Int, Int) => Int)
#+END_SRC
**** Lecture 2.3 Example: Finding Fixed Points
**** Lecture 2.4 Scala Syntax Summary
Symbols:
- |      alternative
- [...]  option
- {...}  reptition
**** Lecture 2.5 Functions and Data
Just OOP
**** Lecture 2.6 More Fun with Rationals
***** Data Abstraction
#+BEGIN_SRC scala
// calculate gcd at first
class Rational(x: Int, y: Int) {
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a%b)
  private val g = gcd(x, y)
  def numer = x/g
  def denom = y/g
}

// calculate gcd when number and denom called
class Rational(x: Int, y: Int) {
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a%b)
  def numer = x/gcd(x, y)
  def denom = y/gcd(x, y)
}

// calculate gcd at first in numer and denom definition
class Rational(x: Int, y: Int) {
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a%b)
  val numer = x/gcd(x, y)
  val denom = y/gcd(x, y)
}
#+END_SRC
In all three cases, users will observe the same behavior of Rational
***** (^•ω •^)
- require: enforce a precondition
- assert: check the code itself
**** Lecture 2.7 Evaluation and Operators
***** Substitution model also works for class and method
***** In Scala, you can use symbols as identifiers (thus function names)...
#+BEGIN_SRC scala
def + (a: Int, b: Int) = a+b
#+END_SRC
The precedence of an operator is determined by its first character
**** Assignment:
Challenging part
- exists
- map 
*** Week 3
**** Lecture 3.1 Class Hierarchies
***** Abstract Class and Class Extensions (with ~extend~ keyword)
***** Persistent Data Structures
- Keeps the old data structure
#+BEGIN_SRC scala
// The following class implement in a functional way (no mutation)
// The takeaway here is that it preserves the old version of the tree, when we insert a new node in the tree
object intsets {
  val t1 = new NonEmpty(3, new Empty, new Empty)
  val t2 = t1 incl 4
}

abstract class IntSet {
  def incl(x: Int): IntSet
  def contains(x: Int): Boolean
  def union(other: IntSet): IntSet
}

class Empty extends IntSet {
  def contains(x: Int): Boolean = false
  def incl(x: Int): IntSet = new NonEmpty(x, new Empty, new Empty)
  def union(other: IntSet): IntSet = other
}

class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {
  def contains(x: Int): Boolean =
    if (x < elem) left contains x
    else if (x > elem) right contains x
    else true

  def incl(x: Int): IntSet =
    if (x < elem) new NonEmpty(elem, left incl x, right)
    else if (x > elem) new NonEmpty(elem, left, right incl x) else this

  def union(other: IntSet): IntSet =
    ((left union right) union other) incl elem  // Makes me sad, since I cannot right this kind of recursion...
}
#+END_SRC
***** Class vs Object
#+BEGIN_SRC scala
// class can be initiated through ~new~ keyword mutiple times
class Empty extends IntSet {
  def contains(x: Int): Boolean = false
  def incl(x: Int): IntSet = new NonEmpty(x, new Empty, new Empty)
}
// object is only created once
// there is no ~new~ keyword
object Empty extends IntSet {
  def contains(x: Int): Boolean = false
  def incl(x: Int): IntSet = new NonEmpty(x, Empty, Empty)
}
#+END_SRC
***** Dynamic method dispatch in OOP ~ Higher-order functions (Substitution Model)
- They're quite similar in substitution model
**** Lecture 3.2 - How Classes Are Organized
***** Package
***** Trait (inherit with ~with~ keyword) (class can ~extends~ trait)
- resembles =interface= in Java
- trait cannot have value parameter like class
***** What is the type of the following expression
#+BEGIN_SRC scala
if (true) 1 else false
// scala.AnyVal
#+END_SRC
**** Lecture 3.3 - Polymorphism
#+BEGIN_SRC scala
trait List[T] {
  def isEmpty: Boolean
  def head: T
  def tail: List[T]
}

// For parameters in the following function signatures, ~val~ is need
// Since we use ~val~ here, they are just a special way to define class method
class Cons[T](val head: T, val tail: List[T]) extends List[T] {
  def isEmpty = false
}

class Nil[T] extends List[T] {
  def isEmpty = true
  def head: Nothing = throw new NoSuchElementException("Nil.head")
  def tail: Nothing = throw new NoSuchElementException("Nil.tail")
}
// Nothing is a subtype of any type
#+END_SRC
***** Type Erasure
- All type parameters and arguments are removed before evaluating the program
- Languages with: Java, Scala, Hakell, ML, OCaml
- Languages without: C++, C#
***** Polymorphism
- Subtyping
- Generics

*** Week 4
**** Lecture 4.1 - Objects Everywhere
